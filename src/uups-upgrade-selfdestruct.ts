import {
  Finding,
  TransactionEvent,
  FindingSeverity,
  FindingType,
} from "forta-agent";
import { EMPTY_CODE, UUPS_UPGRADE_AND_CALL_FUNCTION } from "./constants";

async function handleTransaction(
  txEvent: TransactionEvent,
  getCode: (address: string) => Promise<string>
) {
  const findings: Finding[] = [];

  // if no transaction calls found for upgrading UUPS contracts, return
  const upgradeTransactions = txEvent.filterFunction(
    UUPS_UPGRADE_AND_CALL_FUNCTION
  );
  if (!upgradeTransactions.length) return findings;

  const implementationAddress = txEvent.transaction.to || "";

  // fetch code of new implementation contract
  const code = await getCode(implementationAddress);

  // determine if current code is empty
  if (code === EMPTY_CODE) {
    findings.push(
      Finding.fromObject({
        name: "UUPS Proxy Bricked",
        description: `UUPS Implementation ${implementationAddress} got selfdestructed by ${txEvent.from}`,
        alertId: "UUPS_PROXY-1",
        protocol: "ethereum",
        severity: FindingSeverity.Critical,
        type: FindingType.Exploit,
        metadata: {
          attacker: txEvent.from,
          contractAttacker: upgradeTransactions[0].args[0],
        },
      })
    );
  }

  return findings;
}

export default {
  handleTransaction,
};
